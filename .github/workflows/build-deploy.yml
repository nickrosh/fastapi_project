name: Build and Deploy Code

on: [push, pull_request]

jobs: 
  build:
    environment:
      name: testing
    env:
      DATABASE_USER: ${{secrets.DATABASE_USER}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_HOSTNAME: localhost
      # for some reason host.docker.internal doesn't work here
      # DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps: 
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: Install Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - name: Update pip
        run: python -m pip install --upgrade pip
      - name: install dependencies
        run: pip install -r requirements.txt
      - name: Test with Pytest
        run: |
          pip install pytest
          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    environment:
      name: production

    steps:
      - name: pulling git repo
        uses: actions/checkout@v2
      - name: deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
          heroku_email: ${{secrets.HEROKU_EMAIL}}

      # This SSH into the server with simple password, ssh-key will be 
      # more complex. Then go to the source code, pull the latest code and
      # then restart the api service. But note, you must pipe the Sudo password
      # with the echo to the -S flag to be able to run in sudo
      
      # - name: deploying to Ubuntu
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{secrets.PROD_HOST}}
      #     username: ${{secrets.PROD_USERNAME}}
      #     password: ${{secrets.PROD_PASSWORD}}
      #     script: |
      #       cd app/src
      #       git pull
      #       echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api